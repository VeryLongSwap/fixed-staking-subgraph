// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get poolIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Harvest extends ethereum.Event {
  get params(): Harvest__Params {
    return new Harvest__Params(this);
  }
}

export class Harvest__Params {
  _event: Harvest;

  constructor(event: Harvest) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get poolIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PendingWithdraw extends ethereum.Event {
  get params(): PendingWithdraw__Params {
    return new PendingWithdraw__Params(this);
  }
}

export class PendingWithdraw__Params {
  _event: PendingWithdraw;

  constructor(event: PendingWithdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get poolIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get accumAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PoolAdded extends ethereum.Event {
  get params(): PoolAdded__Params {
    return new PoolAdded__Params(this);
  }
}

export class PoolAdded__Params {
  _event: PoolAdded;

  constructor(event: PoolAdded) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lockPeriod(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get poolIndex(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PoolChangeState extends ethereum.Event {
  get params(): PoolChangeState__Params {
    return new PoolChangeState__Params(this);
  }
}

export class PoolChangeState__Params {
  _event: PoolChangeState;

  constructor(event: PoolChangeState) {
    this._event = event;
  }

  get poolIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get state(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class PoolChanged extends ethereum.Event {
  get params(): PoolChanged__Params {
    return new PoolChanged__Params(this);
  }
}

export class PoolChanged__Params {
  _event: PoolChanged;

  constructor(event: PoolChanged) {
    this._event = event;
  }

  get poolIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TokenWithdraw extends ethereum.Event {
  get params(): TokenWithdraw__Params {
    return new TokenWithdraw__Params(this);
  }
}

export class TokenWithdraw__Params {
  _event: TokenWithdraw;

  constructor(event: TokenWithdraw) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get poolIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Contract__getDailyBalancesResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  get_deposit(): Array<BigInt> {
    return this.value0;
  }

  get_withdraw(): Array<BigInt> {
    return this.value1;
  }
}

export class Contract__getUserInfoResultInfoStruct extends ethereum.Tuple {
  get pool(): Contract__getUserInfoResultInfoPoolStruct {
    return changetype<Contract__getUserInfoResultInfoPoolStruct>(
      this[0].toTuple(),
    );
  }

  get userInfo(): Contract__getUserInfoResultInfoUserInfoStruct {
    return changetype<Contract__getUserInfoResultInfoUserInfoStruct>(
      this[1].toTuple(),
    );
  }

  get endLockTime(): BigInt {
    return this[2].toBigInt();
  }
}

export class Contract__getUserInfoResultInfoPoolStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get endDay(): BigInt {
    return this[1].toBigInt();
  }

  get lockDayPercent(): BigInt {
    return this[2].toBigInt();
  }

  get unlockDayPercent(): BigInt {
    return this[3].toBigInt();
  }

  get lockPeriod(): BigInt {
    return this[4].toBigInt();
  }

  get withdrawalCut1(): BigInt {
    return this[5].toBigInt();
  }

  get withdrawalCut2(): BigInt {
    return this[6].toBigInt();
  }

  get depositEnabled(): boolean {
    return this[7].toBoolean();
  }

  get maxDeposit(): BigInt {
    return this[8].toBigInt();
  }

  get minDeposit(): BigInt {
    return this[9].toBigInt();
  }

  get totalDeposited(): BigInt {
    return this[10].toBigInt();
  }

  get maxPoolAmount(): BigInt {
    return this[11].toBigInt();
  }
}

export class Contract__getUserInfoResultInfoUserInfoStruct extends ethereum.Tuple {
  get userDeposit(): BigInt {
    return this[0].toBigInt();
  }

  get accrueInterest(): BigInt {
    return this[1].toBigInt();
  }

  get lastDayAction(): BigInt {
    return this[2].toBigInt();
  }
}

export class Contract__getUserInfoResult {
  value0: Contract__getUserInfoResultInfoStruct;
  value1: BigInt;

  constructor(value0: Contract__getUserInfoResultInfoStruct, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getInfo(): Contract__getUserInfoResultInfoStruct {
    return this.value0;
  }

  getCurrentDay(): BigInt {
    return this.value1;
  }
}

export class Contract__poolsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: boolean;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;
  value11: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: boolean,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt,
    value11: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    return map;
  }

  getToken(): Address {
    return this.value0;
  }

  getEndDay(): BigInt {
    return this.value1;
  }

  getLockDayPercent(): BigInt {
    return this.value2;
  }

  getUnlockDayPercent(): BigInt {
    return this.value3;
  }

  getLockPeriod(): BigInt {
    return this.value4;
  }

  getWithdrawalCut1(): BigInt {
    return this.value5;
  }

  getWithdrawalCut2(): BigInt {
    return this.value6;
  }

  getDepositEnabled(): boolean {
    return this.value7;
  }

  getMaxDeposit(): BigInt {
    return this.value8;
  }

  getMinDeposit(): BigInt {
    return this.value9;
  }

  getTotalDeposited(): BigInt {
    return this.value10;
  }

  getMaxPoolAmount(): BigInt {
    return this.value11;
  }
}

export class Contract__userInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getUserDeposit(): BigInt {
    return this.value0;
  }

  getAccrueInterest(): BigInt {
    return this.value1;
  }

  getLastDayAction(): BigInt {
    return this.value2;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  dailyDeposit(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "dailyDeposit",
      "dailyDeposit(uint32,uint256):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_dailyDeposit(
    param0: BigInt,
    param1: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dailyDeposit",
      "dailyDeposit(uint32,uint256):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dailyWithdraw(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "dailyWithdraw",
      "dailyWithdraw(uint32,uint256):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_dailyWithdraw(
    param0: BigInt,
    param1: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dailyWithdraw",
      "dailyWithdraw(uint32,uint256):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  earn(): Address {
    let result = super.call("earn", "earn():(address)", []);

    return result[0].toAddress();
  }

  try_earn(): ethereum.CallResult<Address> {
    let result = super.tryCall("earn", "earn():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCurrentDay(): BigInt {
    let result = super.call("getCurrentDay", "getCurrentDay():(uint32)", []);

    return result[0].toBigInt();
  }

  try_getCurrentDay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getCurrentDay", "getCurrentDay():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDailyBalances(
    poolId: BigInt,
    firstDay: BigInt,
    count: BigInt,
  ): Contract__getDailyBalancesResult {
    let result = super.call(
      "getDailyBalances",
      "getDailyBalances(uint256,uint32,uint256):(uint128[],uint128[])",
      [
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromUnsignedBigInt(firstDay),
        ethereum.Value.fromUnsignedBigInt(count),
      ],
    );

    return new Contract__getDailyBalancesResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray(),
    );
  }

  try_getDailyBalances(
    poolId: BigInt,
    firstDay: BigInt,
    count: BigInt,
  ): ethereum.CallResult<Contract__getDailyBalancesResult> {
    let result = super.tryCall(
      "getDailyBalances",
      "getDailyBalances(uint256,uint32,uint256):(uint128[],uint128[])",
      [
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromUnsignedBigInt(firstDay),
        ethereum.Value.fromUnsignedBigInt(count),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getDailyBalancesResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray(),
      ),
    );
  }

  getUserInfo(_poolIndex: BigInt, _user: Address): Contract__getUserInfoResult {
    let result = super.call(
      "getUserInfo",
      "getUserInfo(uint256,address):(((address,uint32,uint32,uint32,uint32,uint32,uint32,bool,uint128,uint128,uint128,uint128),(uint128,uint128,uint32),uint32),uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(_poolIndex),
        ethereum.Value.fromAddress(_user),
      ],
    );

    return changetype<Contract__getUserInfoResult>(
      new Contract__getUserInfoResult(
        changetype<Contract__getUserInfoResultInfoStruct>(result[0].toTuple()),
        result[1].toBigInt(),
      ),
    );
  }

  try_getUserInfo(
    _poolIndex: BigInt,
    _user: Address,
  ): ethereum.CallResult<Contract__getUserInfoResult> {
    let result = super.tryCall(
      "getUserInfo",
      "getUserInfo(uint256,address):(((address,uint32,uint32,uint32,uint32,uint32,uint32,bool,uint128,uint128,uint128,uint128),(uint128,uint128,uint32),uint32),uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(_poolIndex),
        ethereum.Value.fromAddress(_user),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getUserInfoResult>(
        new Contract__getUserInfoResult(
          changetype<Contract__getUserInfoResultInfoStruct>(value[0].toTuple()),
          value[1].toBigInt(),
        ),
      ),
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pendingWithdraw(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "pendingWithdraw",
      "pendingWithdraw(uint32,uint256):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_pendingWithdraw(
    param0: BigInt,
    param1: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingWithdraw",
      "pendingWithdraw(uint32,uint256):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolLength(): BigInt {
    let result = super.call("poolLength", "poolLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolLength", "poolLength():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pools(param0: BigInt): Contract__poolsResult {
    let result = super.call(
      "pools",
      "pools(uint256):(address,uint32,uint32,uint32,uint32,uint32,uint32,bool,uint128,uint128,uint128,uint128)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new Contract__poolsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBoolean(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt(),
      result[11].toBigInt(),
    );
  }

  try_pools(param0: BigInt): ethereum.CallResult<Contract__poolsResult> {
    let result = super.tryCall(
      "pools",
      "pools(uint256):(address,uint32,uint32,uint32,uint32,uint32,uint32,bool,uint128,uint128,uint128,uint128)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__poolsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBoolean(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt(),
        value[11].toBigInt(),
      ),
    );
  }

  userInfo(param0: Address, param1: BigInt): Contract__userInfoResult {
    let result = super.call(
      "userInfo",
      "userInfo(address,uint256):(uint128,uint128,uint32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return new Contract__userInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_userInfo(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<Contract__userInfoResult> {
    let result = super.tryCall(
      "userInfo",
      "userInfo(address,uint256):(uint128,uint128,uint32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__userInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  userPendingWithdraw(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "userPendingWithdraw",
      "userPendingWithdraw(address,uint256):(uint32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_userPendingWithdraw(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userPendingWithdraw",
      "userPendingWithdraw(address,uint256):(uint32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AddPoolCall extends ethereum.Call {
  get inputs(): AddPoolCall__Inputs {
    return new AddPoolCall__Inputs(this);
  }

  get outputs(): AddPoolCall__Outputs {
    return new AddPoolCall__Outputs(this);
  }
}

export class AddPoolCall__Inputs {
  _call: AddPoolCall;

  constructor(call: AddPoolCall) {
    this._call = call;
  }

  get _pool(): AddPoolCall_poolStruct {
    return changetype<AddPoolCall_poolStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class AddPoolCall__Outputs {
  _call: AddPoolCall;

  constructor(call: AddPoolCall) {
    this._call = call;
  }
}

export class AddPoolCall_poolStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get endDay(): BigInt {
    return this[1].toBigInt();
  }

  get lockDayPercent(): BigInt {
    return this[2].toBigInt();
  }

  get unlockDayPercent(): BigInt {
    return this[3].toBigInt();
  }

  get lockPeriod(): BigInt {
    return this[4].toBigInt();
  }

  get withdrawalCut1(): BigInt {
    return this[5].toBigInt();
  }

  get withdrawalCut2(): BigInt {
    return this[6].toBigInt();
  }

  get depositEnabled(): boolean {
    return this[7].toBoolean();
  }

  get maxDeposit(): BigInt {
    return this[8].toBigInt();
  }

  get minDeposit(): BigInt {
    return this[9].toBigInt();
  }

  get totalDeposited(): BigInt {
    return this[10].toBigInt();
  }

  get maxPoolAmount(): BigInt {
    return this[11].toBigInt();
  }
}

export class ChangePoolCall extends ethereum.Call {
  get inputs(): ChangePoolCall__Inputs {
    return new ChangePoolCall__Inputs(this);
  }

  get outputs(): ChangePoolCall__Outputs {
    return new ChangePoolCall__Outputs(this);
  }
}

export class ChangePoolCall__Inputs {
  _call: ChangePoolCall;

  constructor(call: ChangePoolCall) {
    this._call = call;
  }

  get _poolIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _pool(): ChangePoolCall_poolStruct {
    return changetype<ChangePoolCall_poolStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }
}

export class ChangePoolCall__Outputs {
  _call: ChangePoolCall;

  constructor(call: ChangePoolCall) {
    this._call = call;
  }
}

export class ChangePoolCall_poolStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get endDay(): BigInt {
    return this[1].toBigInt();
  }

  get lockDayPercent(): BigInt {
    return this[2].toBigInt();
  }

  get unlockDayPercent(): BigInt {
    return this[3].toBigInt();
  }

  get lockPeriod(): BigInt {
    return this[4].toBigInt();
  }

  get withdrawalCut1(): BigInt {
    return this[5].toBigInt();
  }

  get withdrawalCut2(): BigInt {
    return this[6].toBigInt();
  }

  get depositEnabled(): boolean {
    return this[7].toBoolean();
  }

  get maxDeposit(): BigInt {
    return this[8].toBigInt();
  }

  get minDeposit(): BigInt {
    return this[9].toBigInt();
  }

  get totalDeposited(): BigInt {
    return this[10].toBigInt();
  }

  get maxPoolAmount(): BigInt {
    return this[11].toBigInt();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _poolIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class HarvestCall extends ethereum.Call {
  get inputs(): HarvestCall__Inputs {
    return new HarvestCall__Inputs(this);
  }

  get outputs(): HarvestCall__Outputs {
    return new HarvestCall__Outputs(this);
  }
}

export class HarvestCall__Inputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }

  get _poolIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class HarvestCall__Outputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _earn(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetEarnCall extends ethereum.Call {
  get inputs(): SetEarnCall__Inputs {
    return new SetEarnCall__Inputs(this);
  }

  get outputs(): SetEarnCall__Outputs {
    return new SetEarnCall__Outputs(this);
  }
}

export class SetEarnCall__Inputs {
  _call: SetEarnCall;

  constructor(call: SetEarnCall) {
    this._call = call;
  }

  get _newEarn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetEarnCall__Outputs {
  _call: SetEarnCall;

  constructor(call: SetEarnCall) {
    this._call = call;
  }
}

export class SetPoolEndDayCall extends ethereum.Call {
  get inputs(): SetPoolEndDayCall__Inputs {
    return new SetPoolEndDayCall__Inputs(this);
  }

  get outputs(): SetPoolEndDayCall__Outputs {
    return new SetPoolEndDayCall__Outputs(this);
  }
}

export class SetPoolEndDayCall__Inputs {
  _call: SetPoolEndDayCall;

  constructor(call: SetPoolEndDayCall) {
    this._call = call;
  }

  get _poolIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _endDay(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetPoolEndDayCall__Outputs {
  _call: SetPoolEndDayCall;

  constructor(call: SetPoolEndDayCall) {
    this._call = call;
  }
}

export class SetPoolStateCall extends ethereum.Call {
  get inputs(): SetPoolStateCall__Inputs {
    return new SetPoolStateCall__Inputs(this);
  }

  get outputs(): SetPoolStateCall__Outputs {
    return new SetPoolStateCall__Outputs(this);
  }
}

export class SetPoolStateCall__Inputs {
  _call: SetPoolStateCall;

  constructor(call: SetPoolStateCall) {
    this._call = call;
  }

  get _poolIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _state(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetPoolStateCall__Outputs {
  _call: SetPoolStateCall;

  constructor(call: SetPoolStateCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _poolIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawTokenCall extends ethereum.Call {
  get inputs(): WithdrawTokenCall__Inputs {
    return new WithdrawTokenCall__Inputs(this);
  }

  get outputs(): WithdrawTokenCall__Outputs {
    return new WithdrawTokenCall__Outputs(this);
  }
}

export class WithdrawTokenCall__Inputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawTokenCall__Outputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }
}
